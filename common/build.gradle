plugins {
    id 'com.microsoft.identity.buildsystem' version '0.1.0'
    id 'com.android.library'
    id 'pmd'
    id 'checkstyle'
    id 'maven-publish'
}

apply from: 'versioning/version_tasks.gradle'

def desugarCode = false

if(project.hasProperty("sugar")){
    desugarCode = sugar.toBoolean()
}

buildSystem {
    desugar = desugarCode
}

//apply plugin: 'jacoco'

//To include Robolectric tests in the Jacoco report, flag -> "includeNolocationClasses" is set to true
//tasks.withType(Test) {
//    jacoco.includeNoLocationClasses = true
    //This needs to be excluded for JDK 11
    //SEE: https://support.circleci.com/hc/en-us/articles/360047926852-Android-Builds-Fail-with-java-lang-ClassNotFoundException-jdk-internal-reflect-GeneratedSerializationConstructorAccessor1-
//    jacoco.excludes = ['jdk.internal.*']
//}

//Constants:- used to generate Coverage report task
def unitTestType = "UnitTest"
def androidTestType = "AndroidTest"
def bothTestType = "BothTest"

project.ext.vstsUsername = System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME") != null ? System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_USERNAME") : project.findProperty("vstsUsername")
project.ext.vstsPassword = System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_ACCESSTOKEN") != null ? System.getenv("ENV_VSTS_MVN_ANDROIDCOMMON_ACCESSTOKEN") : project.findProperty("vstsMavenAccessToken")


android {

    compileSdkVersion rootProject.ext.compileSdkVersion

    def sliceParameter = "" // will be blank unless specified by developer
    def dcParameter = "" // will be blank unless specified by developer

    if (project.hasProperty("slice")) {
        sliceParameter = slice
    }

    if (project.hasProperty("dc")) {
        dcParameter = dc
    }

    defaultConfig {
        multiDexEnabled true
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode getAppVersionCode()
        versionName getAppVersionName()
        project.archivesBaseName = "common"
        project.version = android.defaultConfig.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "SLICE", "\"$sliceParameter\"")
        buildConfigField("String", "DC", "\"$dcParameter\"")
    }

    buildTypes {
        debug {
            //testCoverageEnabled true
            minifyEnabled false
        }
        release {
            minifyEnabled false
            debuggable false
            //testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'consumer-rules.pro'
        }
    }

    lintOptions {
        abortOnError true
        disable 'MissingPermission'
        disable 'LongLogTag'
        disable 'DefaultLocale'
        disable 'UnusedResources'
        disable 'GradleDependency'
        disable 'GradleOverrides'
        disable 'OldTargetApi'
        disable 'RtlHardcoded'
    }

    testOptions {
        unitTests.all {
            exclude 'com/microsoft/identity/common/integration'
            exclude 'com/microsoft/identity/common/ropc'
        }

    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'

            // Also load source from common-java
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${archivesBaseName}-${version}.aar"
        }

        // create separate code coverage tasks(for unitTests, androidTests and both Tests) for every build variant
//        def buildVariant = variant.name
//        createCoverageTask(buildVariant, unitTestType)
//        createCoverageTask(buildVariant, androidTestType)
//        createCoverageTask(buildVariant, bothTestType)
    }
}

dependencies {
    //Java 8 - Desugaring - Enabled/Disabled via plugin
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$rootProject.ext.coreLibraryDesugaringVersion"

    api("com.microsoft.identity:common4j:0.0.4") {
        transitive = false
    }

    implementation (group: 'com.microsoft.device.display', name: 'display-mask', version: '0.3.0')

    implementation "com.nimbusds:nimbus-jose-jwt:$rootProject.ext.nimbusVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.ext.appCompatVersion"
    implementation "com.google.code.gson:gson:$rootProject.ext.gsonVersion"
    implementation "androidx.browser:browser:$rootProject.ext.browserVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.constraintLayoutVersion"

    compileOnly "org.projectlombok:lombok:$rootProject.ext.lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$rootProject.ext.lombokVersion"

    // Test dependencies
    // Needed to resolve JSONObject inside of non-instrumented tests
    testImplementation 'org.json:json:20160810'
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoCoreVersion"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$rootProject.ext.powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$rootProject.ext.powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$rootProject.ext.powerMockVersion"
    testImplementation "org.robolectric:robolectric:$rootProject.ext.robolectricVersion"
    testImplementation "androidx.test:core:$rootProject.ext.androidxTestCoreVersion"

    // Instrumented dependencies
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.androidxJunitVersion"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.ext.mockitoAndroidVersion"
    androidTestImplementation("androidx.test.espresso:espresso-core:$rootProject.ext.espressoCoreVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

//ext.createCoverageTask = { buildVariant, testType ->
//    // Code coverage task depends on additional task to run all unit tests and android tests
//    def unitTestTask = "test${buildVariant.capitalize()}UnitTest"
//    def androidTestTask = "connected${buildVariant.capitalize()}AndroidTest"
//
//    // Output of those additional tasks are stored in .exec file for unit tests and .ec file for android tests
//    def unitTestFile = "jacoco/${unitTestTask}.exec"
//    def androidTestFile = "outputs/code_coverage/${buildVariant}AndroidTest/connected/*.ec"
//
//    // Include Task and corresponding output file of tests, according to testType
//    def taskList, executionFiles
//    if (testType.matches(bothTestType)) {
//        taskList = [unitTestTask, androidTestTask]
//        executionFiles = [unitTestFile, androidTestFile]
//    } else if (testType.matches(unitTestType)){
//        taskList = [unitTestTask]
//        executionFiles = [unitTestFile]
//    } else {
//        taskList = [androidTestTask]
//        executionFiles = [androidTestFile]
//    }
//
//    // Task to generate coverage report for particular build variant, that depends on additional tasks depending on testType
//    task "${buildVariant}Common${testType}CoverageReport" (type:JacocoReport, dependsOn: taskList) {
//        group = "Code Coverage"
//        description = "Generate Common Coverage Reports(${testType}) on the ${buildVariant.capitalize()}"
//
//        // Include source files(of Common) in which code coverage needs to be found, after filtering out some set of files
//        def coverageSourceDirs = "${projectDir}/src/main/java";
//        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test.*']
//        def javaClasses = fileTree(
//                dir: "${buildDir}/intermediates/javac/${buildVariant}/classes",
//                excludes: fileFilter
//        )
//
//        //Include all those directories for source files and additional source files defined above
//        sourceDirectories.from = files([coverageSourceDirs])
//        classDirectories.from = files([javaClasses])
//
//        //Code coverage report is generated based on the the output files of additional tasks(unitTestTask, androidTestTask or both)
//        executionData.from = fileTree(dir: "$buildDir", includes: executionFiles)
//
//        // html reports are auto-generated without enabling flag, so enabling xml flag
//        reports {
//            xml.enabled = true
//        }
//    }
//}

// Create tasks to generate javadoc
android.libraryVariants.all { variant ->
    task("${variant.name}Javadoc", type: Javadoc, dependsOn: "assemble${variant.name.capitalize()}") {
        source = variant.javaCompileProvider.get().source

        title = "Microsoft Identity Android Common"

        // First add all of your dependencies to the classpath, then add the android jars
        doFirst { classpath += files(variant.javaCompiler.classpath.files) }
        classpath += files(android.getBootClasspath())

        options.memberLevel = JavadocMemberLevel.PUBLIC
        options.addStringOption('Xdoclint:none', '-quiet')

        // We're excluding these generated files
        exclude '**/R.java'
    }
}

// Create tasks to generate javadoc jar
android.libraryVariants.all { variant ->
    task("${variant.name}JavadocJar", type: Jar, dependsOn: "${variant.name}Javadoc") {
        classifier = 'javadoc'
        from tasks["${variant.name}Javadoc"].destinationDir
    }
}


task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
    destinationDirectory = reporting.file("$project.buildDir/outputs/jar/")
}

def configDir = new File(buildscript.sourceFile.parentFile.parentFile, 'config')
ext.checkstyleConfigDir = "$configDir/checkstyle"

checkstyle {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")

    configProperties.checkstyleConfigDir = checkstyleConfigDir
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/config/checkstyle/suppressions.xml").absolutePath
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

pmd {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task pmd(type: Pmd) {
    description 'Run pmd'
    group 'verification'

    ruleSets = ["java-basic", "java-braces", "java-strings", "java-unusedcode"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// For publishing to the remote maven repo.
afterEvaluate {

    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId 'com.microsoft.identity'
                artifactId 'common'
                //Edit the 'version' here for VSTS RC build
                version = project.version

                pom {
                    name = 'common'
                    description = 'This library contains code shared between the Active Directory ' +
                                    'Authentication Library (ADAL) for Android and the Microsoft ' +
                                    'Authentication Library (MSAL) for Android. This library ' +
                                    'includes only internal classes and is NOT part of the ' +
                                    'public API'
                    url = 'https://github.com/AzureAD/microsoft-authentication-library-common-for-android'
                    developers {
                        developer {
                            id = 'microsoft'
                            name = 'Microsoft'
                        }
                    }
                    licenses {
                        license {
                            name = 'MIT License'
                        }
                    }
                    inceptionYear = '2017'
                    scm {
                        url = 'https://github.com/AzureAD/microsoft-authentication-library-common-for-android/tree/master'
                    }
                    properties = [
                            branch: 'master',
                            version: project.version
                    ]
                }
            }
            debug(MavenPublication) {
                from components.debug
                groupId 'com.microsoft.identity'
                artifactId 'common-debug'
                //Edit the 'version' here for VSTS RC build
                version = project.version
            }
        }

        // Repositories to which Gradle can publish artifacts
        repositories {
            maven {
                name "vsts-maven-adal-android"
                url "https://identitydivision.pkgs.visualstudio.com/_packaging/AndroidADAL/maven/v1"
                credentials {
                    username project.vstsUsername
                    password project.vstsPassword
                }
            }
            maven {
                name "vsts-maven-android"
                url 'https://identitydivision.pkgs.visualstudio.com/IDDP/_packaging/Android/maven/v1'
                credentials {
                    username project.vstsUsername
                    password project.vstsPassword
                }
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug' || task.name == 'assembleRelease') {
        task.dependsOn 'lint', 'sourcesJar', 'pmd'
    }
}
